{"version":3,"sources":["webpack:///./src/templates/categories.tsx"],"names":["Categories","pageContext","data","location","category","edges","totalCount","allMdx","categoryData","allCategoryYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post"],"mappings":"4FACA,4IAkIeA,UA5EI,EAAGC,cAAaC,OAAMC,eAAsC,YAC7E,MAAMC,EAAWH,EAAYG,SAAWH,EAAYG,SAAW,IACzD,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,OAC7BC,EAAeN,EAAKO,gBAAgBJ,MAAMK,KAC9CC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAASU,eAG5C,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBACGX,EADH,MACgBY,IAAOC,OAEvB,oBACEC,KAAK,cACLC,QAASX,WAAcI,KAAOJ,EAAaI,KAAKQ,YAAc,KAEhE,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEf,OAAcY,IAAOC,UAC3D,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUnB,EAASoB,WAC1DP,IAAOQ,UAAY,oBAAMH,SAAS,oBAAoBF,QAASH,IAAOQ,WACvE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEf,OAAcY,IAAOC,UAC5D,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUnB,EAASoB,WAC3DP,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBAAQC,UAAU,sBAAsBC,IAAG,CAAGC,IAAYC,IAAf,QACzC,mBAAKF,IAAG,CAAGG,IAAOC,IAAV,QACN,mBAAKJ,IAAKK,KACR,YAAC,IAAD,CAASC,QAAQ,MAGrB,YAAC,IAAD,CACEN,IAAG,CAAGG,IAAOI,IAAV,OACHC,gBAAiB5B,SAAF,UAAEA,EAAcI,YAAhB,iBAAE,EAAoByB,aAAtB,iBAAE,EAA2BC,uBAA7B,iBAAE,EAA4CC,aAA9C,aAAE,EAAmDC,IACpEb,UAAU,0BAEV,YAAC,IAAD,CAAmBC,IAAKK,IAAON,UAAU,uBACvC,YAAC,IAAD,CAAWA,UAAU,cAAcvB,GACnC,YAAC,IAAD,CAAiBuB,UAAU,oBACxBnB,WAAcI,KAAKQ,YAClBZ,EAAaI,KAAKQ,YAElB,iDACmBd,EAAa,GAAQA,EAAF,SACpB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAOjC,oBAAMO,GAAG,YAAYe,IAAG,CAAGa,IAAUV,IAAb,QACtB,mBAAKH,IAAKK,KACR,mBAAKL,IAAG,CAAGc,IAAH,QACLrC,EAAMsC,IAAI,EAAG/B,UACZ,YAAC,IAAD,CAAUgC,IAAKhC,EAAKiC,OAAOC,KAAMC,KAAMnC,QAK/C,YAAC,IAAD","file":"component---src-templates-categories-tsx-a06cc83ce61980c57426.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ninterface CategoryTemplateProps {\n  location: Location;\n  pageContext: {\n    category: string;\n  };\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMdx: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Categories = ({ pageContext, data, location }: CategoryTemplateProps) => {\n  const category = pageContext.category ? pageContext.category : '';\n  const { edges, totalCount } = data.allMdx;\n  const categoryData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === category.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {category} - {config.title}\n        </title>\n        <meta\n          name=\"description\"\n          content={categoryData?.node ? categoryData.node.description : ''}\n        />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header className=\"site-archive-header\" css={[SiteHeader, SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={categoryData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{category}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {categoryData?.node.description ? (\n                  categoryData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Categories;\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    allCategoryYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            category\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}